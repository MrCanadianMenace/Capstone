
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module MemoryAdderDemo(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	//output		     [6:0]		HEX2,
	//output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	//output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	//output		     [6:0]		HEX7,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [31:0]		DRAM_DQ,
	output		     [3:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N
);


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire i_CLK = CLOCK_50;
wire i_STEP = ~KEY[2];
wire i_RST = ~KEY[3];
wire [3:0] w_HEX_in [4:0];
wire [6:0] w_HEX_out [4:0];

assign HEX6 = w_HEX_out[4];
assign HEX5 = w_HEX_out[3];
assign HEX4 = w_HEX_out[2]; 
assign HEX1 = w_HEX_out[1];
assign HEX0 = w_HEX_out[0];

//=======================================================
//  Structural coding
//=======================================================
assign LEDG[6] = i_RST;
assign LEDG[4] = i_STEP;

    /** Adder State Machine **/
    adder MYMOD (
        .i_CLK(i_STEP),
        .i_RST(i_RST),
        .mem_addr_HEX0(w_HEX_in[0]),
        .mem_addr_HEX1(w_HEX_in[1]),
        .mem_val_HEX0(w_HEX_in[2]),
        .mem_val_HEX1(w_HEX_in[3]),
        .state_HEX0(w_HEX_in[4]),
    );

    genvar i;
    generate 
            for (i=0; i<5; i=i+1) begin:BUILD_HEX_DRIVERS
                hex_driver(w_HEX_in[i], w_HEX_out[i]);
            end
    endgenerate

endmodule
